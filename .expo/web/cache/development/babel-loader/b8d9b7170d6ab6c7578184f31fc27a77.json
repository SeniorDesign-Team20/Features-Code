{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Box, Button, ButtonGroup, Flex, HStack, IconButton, Input, SkeletonText, Text, ChakraProvider, theme } from '@chakra-ui/react';\nimport { FaLocationArrow, FaTimes } from 'react-icons/fa';\nimport { useJsApiLoader, GoogleMap, Marker, Autocomplete, DirectionsRenderer } from '@react-google-maps/api';\nimport { useRef, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar center = {\n  lat: 48.8584,\n  lng: 2.2945\n};\nfunction Map() {\n  var _useJsApiLoader = useJsApiLoader({\n      googleMapsApiKey: REACT_APP_GOOGLE_MAPS_API_KEY,\n      libraries: ['places']\n    }),\n    isLoaded = _useJsApiLoader.isLoaded;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    map = _useState2[0],\n    setMap = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    directionsResponse = _useState4[0],\n    setDirectionsResponse = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    distance = _useState6[0],\n    setDistance = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    duration = _useState8[0],\n    setDuration = _useState8[1];\n  var originRef = useRef();\n  var destiantionRef = useRef();\n  if (!isLoaded) {\n    return _jsx(SkeletonText, {});\n  }\n  function calculateRoute() {\n    return _calculateRoute.apply(this, arguments);\n  }\n  function _calculateRoute() {\n    _calculateRoute = _asyncToGenerator(function* () {\n      if (originRef.current.value === '' || destiantionRef.current.value === '') {\n        return;\n      }\n      var directionsService = new google.maps.DirectionsService();\n      var results = yield directionsService.route({\n        origin: originRef.current.value,\n        destination: destiantionRef.current.value,\n        travelMode: google.maps.TravelMode.DRIVING\n      });\n      setDirectionsResponse(results);\n      setDistance(results.routes[0].legs[0].distance.text);\n      setDuration(results.routes[0].legs[0].duration.text);\n    });\n    return _calculateRoute.apply(this, arguments);\n  }\n  function clearRoute() {\n    setDirectionsResponse(null);\n    setDistance('');\n    setDuration('');\n    originRef.current.value = '';\n    destiantionRef.current.value = '';\n  }\n  return _jsxs(\"div\", {\n    children: [_jsxs(Helmet, {\n      children: [_jsx(\"meta\", {\n        charSet: \"utf-8\"\n      }), _jsx(\"title\", {\n        children: \"Map\"\n      })]\n    }), _jsx(ChakraProvider, {\n      theme: theme,\n      children: _jsxs(Flex, {\n        position: \"relative\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        h: \"100vh\",\n        w: \"100vw\",\n        children: [_jsx(Box, {\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n          h: \"100%\",\n          w: \"100%\",\n          children: _jsxs(GoogleMap, {\n            center: center,\n            zoom: 15,\n            mapContainerStyle: {\n              width: '100%',\n              height: '100%'\n            },\n            options: {\n              zoomControl: false,\n              streetViewControl: false,\n              mapTypeControl: false,\n              fullscreenControl: false\n            },\n            onLoad: function onLoad(map) {\n              return setMap(map);\n            },\n            children: [_jsx(Marker, {\n              position: center\n            }), directionsResponse && _jsx(DirectionsRenderer, {\n              directions: directionsResponse\n            })]\n          })\n        }), _jsxs(Box, {\n          p: 4,\n          borderRadius: \"lg\",\n          m: 4,\n          bgColor: \"white\",\n          shadow: \"base\",\n          minW: \"container.md\",\n          zIndex: \"1\",\n          children: [_jsxs(HStack, {\n            spacing: 2,\n            justifyContent: \"space-between\",\n            children: [_jsx(Box, {\n              flexGrow: 1,\n              children: _jsx(Autocomplete, {\n                children: _jsx(Input, {\n                  type: \"text\",\n                  placeholder: \"Origin\",\n                  ref: originRef\n                })\n              })\n            }), _jsx(Box, {\n              flexGrow: 1,\n              children: _jsx(Autocomplete, {\n                children: _jsx(Input, {\n                  type: \"text\",\n                  placeholder: \"Destination\",\n                  ref: destiantionRef\n                })\n              })\n            }), _jsxs(ButtonGroup, {\n              children: [_jsx(Button, {\n                colorScheme: \"pink\",\n                type: \"submit\",\n                onClick: calculateRoute,\n                children: \"Calculate Route\"\n              }), _jsx(IconButton, {\n                \"aria-label\": \"center back\",\n                icon: _jsx(FaTimes, {}),\n                onClick: clearRoute\n              })]\n            })]\n          }), _jsxs(HStack, {\n            spacing: 4,\n            mt: 4,\n            justifyContent: \"space-between\",\n            children: [_jsxs(Text, {\n              children: [\"Distance: \", distance, \" \"]\n            }), _jsxs(Text, {\n              children: [\"Duration: \", duration, \" \"]\n            }), _jsx(IconButton, {\n              \"aria-label\": \"center back\",\n              icon: _jsx(FaLocationArrow, {}),\n              isRound: true,\n              onClick: function onClick() {\n                map.panTo(center);\n                map.setZoom(15);\n              }\n            })]\n          })]\n        })]\n      })\n    })]\n  });\n}\nexport default Map;","map":{"version":3,"names":["React","Helmet","Box","Button","ButtonGroup","Flex","HStack","IconButton","Input","SkeletonText","Text","ChakraProvider","theme","FaLocationArrow","FaTimes","useJsApiLoader","GoogleMap","Marker","Autocomplete","DirectionsRenderer","useRef","useState","center","lat","lng","Map","googleMapsApiKey","REACT_APP_GOOGLE_MAPS_API_KEY","libraries","isLoaded","map","setMap","directionsResponse","setDirectionsResponse","distance","setDistance","duration","setDuration","originRef","destiantionRef","calculateRoute","current","value","directionsService","google","maps","DirectionsService","results","route","origin","destination","travelMode","TravelMode","DRIVING","routes","legs","text","clearRoute","width","height","zoomControl","streetViewControl","mapTypeControl","fullscreenControl","panTo","setZoom"],"sources":["/Users/benyamintrachtenberg/Desktop/EC463/Features-Code/pages/Map/Map.js"],"sourcesContent":["import React from \"react\";\nimport {Helmet} from \"react-helmet\";\nimport { Box, Button, ButtonGroup, Flex, HStack, IconButton, Input, SkeletonText, Text, ChakraProvider, theme } from '@chakra-ui/react';\nimport { FaLocationArrow, FaTimes } from 'react-icons/fa';\nimport { useJsApiLoader, GoogleMap, Marker, Autocomplete, DirectionsRenderer } from '@react-google-maps/api';\nimport { useRef, useState } from 'react';\n  \nconst center = { lat: 48.8584, lng: 2.2945 }\n\nfunction Map(){\n    const { isLoaded } = useJsApiLoader({\n        googleMapsApiKey: REACT_APP_GOOGLE_MAPS_API_KEY,\n        libraries: ['places'],\n      })\n    \n      const [map, setMap] = useState(/** @type google.maps.Map */ (null))\n      const [directionsResponse, setDirectionsResponse] = useState(null)\n      const [distance, setDistance] = useState('')\n      const [duration, setDuration] = useState('')\n    \n      /** @type React.MutableRefObject<HTMLInputElement> */\n      const originRef = useRef()\n      /** @type React.MutableRefObject<HTMLInputElement> */\n      const destiantionRef = useRef()\n    \n      if (!isLoaded) {\n        return <SkeletonText />\n      }\n    \n      async function calculateRoute() {\n        if (originRef.current.value === '' || destiantionRef.current.value === '') {\n          return\n        }\n        // eslint-disable-next-line no-undef\n        const directionsService = new google.maps.DirectionsService()\n        const results = await directionsService.route({\n          origin: originRef.current.value,\n          destination: destiantionRef.current.value,\n          // eslint-disable-next-line no-undef\n          travelMode: google.maps.TravelMode.DRIVING,\n        })\n        setDirectionsResponse(results)\n        setDistance(results.routes[0].legs[0].distance.text)\n        setDuration(results.routes[0].legs[0].duration.text)\n      }\n    \n      function clearRoute() {\n        setDirectionsResponse(null)\n        setDistance('')\n        setDuration('')\n        originRef.current.value = ''\n        destiantionRef.current.value = ''\n      }\n\n    return(\n        <div>\n            {/* Tab Name */}\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Map</title>\n            </Helmet>\n            <ChakraProvider theme={theme}>\n                <Flex\n                    position='relative'\n                    flexDirection='column'\n                    alignItems='center'\n                    h='100vh'\n                    w='100vw'\n                >\n                <Box position='absolute' left={0} top={0} h='100%' w='100%'>\n                    {/* Google Map Box */}\n                    <GoogleMap\n                    center={center}\n                    zoom={15}\n                    mapContainerStyle={{ width: '100%', height: '100%' }}\n                    options={{\n                        zoomControl: false,\n                        streetViewControl: false,\n                        mapTypeControl: false,\n                        fullscreenControl: false,\n                    }}\n                    onLoad={map => setMap(map)}\n                    >\n                    <Marker position={center} />\n                    {directionsResponse && (\n                        <DirectionsRenderer directions={directionsResponse} />\n                    )}\n                    </GoogleMap>\n                </Box>\n                <Box\n                    p={4}\n                    borderRadius='lg'\n                    m={4}\n                    bgColor='white'\n                    shadow='base'\n                    minW='container.md'\n                    zIndex='1'\n                >\n                    <HStack spacing={2} justifyContent='space-between'>\n                    <Box flexGrow={1}>\n                        <Autocomplete>\n                        <Input type='text' placeholder='Origin' ref={originRef} />\n                        </Autocomplete>\n                    </Box>\n                    <Box flexGrow={1}>\n                        <Autocomplete>\n                        <Input\n                            type='text'\n                            placeholder='Destination'\n                            ref={destiantionRef}\n                        />\n                        </Autocomplete>\n                    </Box>\n\n                    <ButtonGroup>\n                        <Button colorScheme='pink' type='submit' onClick={calculateRoute}>\n                        Calculate Route\n                        </Button>\n                        <IconButton\n                        aria-label='center back'\n                        icon={<FaTimes />}\n                        onClick={clearRoute}\n                        />\n                    </ButtonGroup>\n                    </HStack>\n                    <HStack spacing={4} mt={4} justifyContent='space-between'>\n                    <Text>Distance: {distance} </Text>\n                    <Text>Duration: {duration} </Text>\n                    <IconButton\n                        aria-label='center back'\n                        icon={<FaLocationArrow />}\n                        isRound\n                        onClick={() => {\n                        map.panTo(center)\n                        map.setZoom(15)\n                        }}\n                    />\n                    </HStack>\n                </Box>\n                </Flex>\n            </ChakraProvider>\n        </div>\n    );\n}\n\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}